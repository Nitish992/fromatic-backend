from sqlalchemy import create_engine, Column, Integer, String, JSON as SQLAlchemyJSON, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

# Models
Base = declarative_base()
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    clerk_user_id = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    forms = relationship("Form", back_populates="user")

class Form(Base):
    __tablename__ = "forms"

    id = Column(Integer, primary_key=True, index=True)
    form_id = Column(String, unique=True, index=True)  # Unique form_id generated by NanoID
    user_id = Column(Integer, ForeignKey('users.id'))
    name = Column(String, index=True)
    fields = Column(SQLAlchemyJSON)  # Store the form structure in JSON
    responses = relationship("Response", back_populates="form")

    user = relationship("User", back_populates="forms")

class Response(Base):
    __tablename__ = "responses"

    id = Column(Integer, primary_key=True, index=True)
    form_id = Column(Integer, ForeignKey('forms.id'))
    user_id = Column(Integer)
    data = Column(SQLAlchemyJSON)
    form = relationship("Form", back_populates="responses")
